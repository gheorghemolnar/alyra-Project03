{"events":{"ProposalRegistered(uint256,string)":{"notice":"Event emitted when a new Proposal has been added"},"Voted(address,uint256)":{"notice":"Event emitted when a proposal has been Voted has been added"},"VoterRegistered(address)":{"notice":"Event emitted when a new Voter has been added"},"WorkflowStatusChange(uint8,uint8)":{"notice":"Event emitted when workflow status has changed"}},"kind":"user","methods":{"addProposal(string)":{"notice":"Allows registered voters to add a Proposal when the workflow is 'ProposalsRegistrationStarted'"},"addVoter(address)":{"notice":"Allows to register a new Voter when the workflow is 'RegisteringVoters'"},"endProposalsRegistering()":{"notice":"Allows the application owner to change the workflow status in order to end proposals registration"},"endVotingSession()":{"notice":"Allows the application owner to change the workflow status in order to end votes registration"},"getOneProposal(uint256)":{"notice":"Returns a Proposal details"},"getVoter(address)":{"notice":"Returns a Voter details"},"setVote(uint256)":{"notice":"Allows registered voters to vote a Proposal when the workflow is 'VotingSessionStarted'"},"startProposalsRegistering()":{"notice":"Allows the application owner to change the workflow status in order to allow proposals registration"},"startVotingSession()":{"notice":"Allows the application owner to change the workflow status in order to allow votes registration"},"tallyVotes()":{"notice":"Allows the application owner to change the workflow status in order to tally votes"},"workflowStatus()":{"notice":"Used to store the current workflow status"}},"notice":"You can use this contract for some basic voting","version":1}