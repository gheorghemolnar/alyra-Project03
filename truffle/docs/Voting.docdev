{"author":"Gheorghe Molnar","details":"The current version of the contract only support some basic votes tallying","events":{"ProposalRegistered(uint256,string)":{"details":"Event emitted when a new Proposal has been added"},"Voted(address,uint256)":{"details":"Event emitted when a proposal has been Voted"},"VoterRegistered(address)":{"details":"Event emitted when a new Voter has been added"},"WorkflowStatusChange(uint8,uint8)":{"details":"Event emitted when workflow status has changed"}},"kind":"dev","methods":{"addProposal(string)":{"details":"Allows registration of a new Voter when the workflow is 'ProposalsRegistrationStarted' and emits an 'ProposalRegistered' event","params":{"_desc":"string"}},"addVoter(address)":{"details":"Allows registration of a new Voter when the workflow is 'RegisteringVoters' and emits an 'VoterRegistered' event","params":{"_addr":"address"}},"endProposalsRegistering()":{"details":"Allows the application owner to change the workflow status to 'ProposalsRegistrationEnded' and emits an 'WorkflowStatusChange' event"},"endVotingSession()":{"details":"Allows the application owner to change the workflow status to 'VotingSessionEnded' and emits an 'WorkflowStatusChange' event"},"getOneProposal(uint256)":{"details":"Returns a Proposal structure corresponding to the address","params":{"_id":"uint"},"returns":{"_0":"Proposal"}},"getVoter(address)":{"details":"Returns a Voter structure corresponding to the address","params":{"_addr":"address"},"returns":{"_0":"Voter"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setVote(uint256)":{"details":"Allows registered voters to vote a Proposal when the workflow is 'VotingSessionStarted' and emits an 'ProposalRegistered' event","params":{"_id":"uint"}},"startProposalsRegistering()":{"details":"Allows the application owner to change the workflow status to 'ProposalsRegistrationStarted' and emits an 'WorkflowStatusChange' event"},"startVotingSession()":{"details":"Allows the application owner to change the workflow status to 'VotingSessionStarted' and emits an 'WorkflowStatusChange' event"},"tallyVotes()":{"details":"Allows the application owner to change the workflow status to 'VotesTallied' and emits an 'WorkflowStatusChange' event; it computes the voting result and updates the 'winningProposalID'; the computation logic should be improved"},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"proposalsArray":{"details":"Array used to store the proposals, with a max of 100 elements"},"voters":{"details":"Mapping used to link an address to a Voter"},"workflowStatus":{"details":"Used to store the current workflow status"}},"title":"A Web3 Voting application","version":1}